buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}

apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

configurations.all {
    resolutionStrategy {
        force 'cpw.mods:securejarhandler:0.9.50'
    }
}

version = build_version
group = "xyz.heroesunited"
archivesBaseName = "heroesunited"

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

configurations {
    library
    shade
    implementation.extendsFrom library
    shade.extendsFrom library
}

minecraft {
    mappings channel: 'official', version: "$project.minecraft_version"
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=heroesunited.mixins.json"
            mods {
                heroesunited {
                    source sourceSets.main
                }
            }
        }

        clientWithCredentials {
            parent runs.client
            args '--username', 'jeb_', '--uuid', '853c80ef-3c37-49fd-aa49-938b674adae6', "-mixin.config=heroesunited.mixins.json"
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                heroesunited {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'heroesunited', '--all', '--output', file('src/generated/resources/')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                heroesunited {
                    source sourceSets.main
                }
            }
        }
    }
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

shadowJar {
    configurations = [project.configurations.shade]
    exclude 'com/sun/jna/**'
    exclude 'software/bernie/example/**'
    exclude 'assets/geckolib3/**'
    relocate 'software.bernie.geckolib', 'software.bernie.HU.geckolib'

    classifier ''
}

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    jcenter()
    maven { url "https://www.cursemaven.com" }
    maven { url 'https://repo.repsy.io/mvn/chappie/heroesunited' }
    maven { url "https://repo.spongepowered.org/repository/maven-public/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:$project.minecraft_version-$project.forge_version"

    library "org.spongepowered:mixin:0.8.4-SNAPSHOT"
    library "com.google.guava:guava:21.0"
    //annotationProcessor "org.spongepowered:mixin:0.8.4-SNAPSHOT"

    compileOnly fg.deobf('curse.maven:obfuscate-289380:3148131')

    library('com.jagrosh:DiscordIPC:0.4') {
        exclude group: 'org.slf4j'
    }
    implementation fg.deobf("software.bernie.geckolib:geckolib:$project.geckolib_version")

    shade 'com.jagrosh:DiscordIPC:0.4'
    shade fg.deobf("software.bernie.geckolib:geckolib:$project.geckolib_version")
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives tasks.shadowJar
}

reobf {
    shadowJar {
        dependsOn tasks.createMcpToSrg
        mappings = tasks.createMcpToSrg.outputs.files.singleFile
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${archivesBaseName}",
                "Specification-Vendor"    : "${archivesBaseName}sareus",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "${archivesBaseName}sareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "heroesunited.mixins.json"
        ])
    }
}


afterEvaluate {
    def reobfTsrgFile = file("${tasks.reobfJar.temporaryDir}/mixins.tsrg")
    def refMapFile = file("${tasks.compileJava.temporaryDir}/mixins.heroesunited.refmap.json")
    configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
        dependencies.annotationProcessor([group: dep.moduleGroup, name: dep.moduleName, version: dep.moduleVersion])
    }
    tasks.compileJava {
        options.compilerArgs += [
                "-AreobfTsrgFile=${buildDir.canonicalPath}/createMcpToSrg/output.tsrg",
                "-AoutTsrgFile=${reobfTsrgFile.canonicalPath}",
                "-AoutRefMapFile=${refMapFile.canonicalPath}",
                "-AmappingTypes=tsrg"
        ]
        dependsOn("createMcpToSrg")
        doFirst {
            reobfTsrgFile.delete()
            refMapFile.delete()
        }
    }
    tasks.jar.from refMapFile
    tasks.reobfJar {
        mappings = reobfTsrgFile
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
            artifact deobfJar
            artifact sourcesJar
            artifactId = "hu-core"
        }
    }
    repositories {
        maven {
            def explodingCreeperURL = System.getenv("explodingCreeperURL")
            url = explodingCreeperURL
            credentials {
                def envUsername = System.getenv("explodingCreeperUser")
                def envPassword = System.getenv("explodingCreeperPassword")
                username = envUsername
                password = envPassword
            }
        }
    }
}