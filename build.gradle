buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'

version = build_version
group = "xyz.heroesunited"
archivesBaseName = "heroesunited"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: "2022.03.13-${mc_version}"
    //mappings channel: 'official', version: "${mc_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            mods {
                heroesunited {
                    source sourceSets.main
                }
            }
        }

        clientWithCredentials {
            parent runs.client
            args '--username', 'jeb_', '--uuid', '853c80ef-3c37-49fd-aa49-938b674adae6'
        }

        server {
            workingDirectory project.file('run')

            mods {
                heroesunited {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            args '--mod', 'heroesunited', '--all', '--output', file('src/generated/resources/')

            mods {
                heroesunited {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    shade
    implementation.extendsFrom shade

    library
    shade.extendsFrom library
}

minecraft.runs.all {
    property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
    property 'forge.logging.console.level', 'debug'

    property 'mixin.env.remapRefMap', 'true'
    property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "net.minecraftforge:forge:$project.mc_version-$project.forge_version"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    shade fg.deobf("software.bernie.geckolib:geckolib-forge-1.18:$project.geckolib_version")

    library('com.github.jagrosh:DiscordIPC:ff8c5b73ee') {
        exclude group: 'org.slf4j'
    }
}

shadowJar {
    configurations = [project.configurations.shade]
    exclude '**/*.java'
    exclude 'com/sun/jna/**'
    exclude 'software/bernie/example/**'
    exclude 'assets/geckolib3/**'
    relocate 'software.bernie.geckolib', 'software.bernie.HU.geckolib'
    relocate 'com.jagrosh', 'com.jagrosh.HU'

    classifier ''
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier 'sources'
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives tasks.shadowJar
}

reobf {
    shadowJar {
        dependsOn tasks.createMcpToSrg
        mappings = tasks.createMcpToSrg.outputs.files.singleFile
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${archivesBaseName}",
                "Specification-Vendor"    : "${archivesBaseName}sareus",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "${archivesBaseName}sareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


mixin {
    add sourceSets.main, "heroesunited.refmap.json"
    config 'heroesunited.mixins.json'

    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true
    quiet
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
            artifact deobfJar
            artifact sourcesJar
            artifactId = "hu-core"
        }
    }
    repositories {
        maven {
            url = 'https://maven.explodingcreeper.me/releases'
            credentials {
                username = System.getenv("explodingCreeperUser")
                password = System.getenv("explodingCreeperPassword")
            }
        }
    }
}